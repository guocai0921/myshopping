1.查看 RedHat 版本的方法:
--->>cat /etc/redhat-release
2.查看Linux系统内核:
--->>uname -r
3.docker images :列出本地主机上的镜像
	-a:列出本地所有的镜像（含中间映像层）
	-q:只显示镜像ID。
	--digests:显示镜像的摘要信息
	--no-trunc:显示完整的镜像信息
4.docker search：镜像查询
5.docker pull：拉取镜像
6.docker rmi -f :删除镜像
7.docker version ：
8.docker info ：

service docker start

https://mh20fqdp.mirror.aliyuncs.com

sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://mh20fqdp.mirror.aliyuncs.com"]
}
EOF

镜像类
docker build --rm=true . 构建镜像
docker pull ${IMAGE} 安装镜像
docker images 显示已经安装的镜像
docker images --no-trunc 显示已经安装镜像的详细内容
docker rmi ${IMAGE_ID} 删除指定镜像
docker rmi $(docker images | grep “^” | awk “{print $3}”) 删除所有没有标签的镜像
docker rm $(docker ps -aq) 删除所有的镜像
docker rmi $(docker images --quiet --filter &quot;dangling=true&quot;) 删除未使用的镜像
容器类
docker run 运行容器
docker ps 显示正在运行的容器
docker ps -a 显示所有的容器
docker stop ${CID} 停止指定容器
docker stop docker ps -q 停止所有正在运行的容器
docker ps -a --filter &quot;exited=1&quot; 显示所有退出状态为1的容器
docker rm ${CID} 删除指定容器
docker ps -a | grep wildfly | awk '{print $1}' | xargs docker rm -f 使用正则表达式删除容器
docker rm -f $(docker ps -a | grep Exit | awk '{ print $1 }') 删除所有退出的容器
docker rm $(docker ps -aq) 删除所有的容器
docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${CID} 显示指定容器的IP
docker attach ${CID} 进入容器
docker exec -it ${CID} bash 进入容器打开一个shell
docker ps | grep wildfly | awk '{print $1}' 通过正则表达式查找容器的镜像ID

docker kill ${CID} 强制停止指定容器

Ctrl+p+q:退出正在运行的容器返回到宿主机
docker attach 容器ID ：直接进入容器启动命令的终端，不会启动新的进程
docker exec -it 容器ID bashShell : 是在容器中打开新的终端，并且可以启动新的进程

docker run -d 容器名 ：启动守护式容器
docker logs -f -t --tail 容器ID : 查看容器日志
docker top 容器ID : 查看容器内运行的进程
docker inspect 容器ID ： 查看容器内部细节
docker attach 容器ID/docker exec -it 容器ID bashShell : 进入正在运行的容器并以命令行交互
docker cp 容器ID：容器内路径 目的主机路径 ： 从容器内拷贝文件到主机上

docker commit : 提交容器副本使之成为一个新的镜像
docker commit -m="提交的描述信息" -a="作者" 容器ID 要创建的目标镜像名：[标签名]

docker run -it -v /myDataVolume:/dataVolumeContainer --name newCentos centos

只允许容器读写操作，而容器只能读操作不能写操作:docker run -it -v /myDataVolume:/dataVolumeContainer:ro --name newCentos centos

<--
# volme test
FROM centos
VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]
CMD echo "finished,-----------success1"
CMD /bin/bash
-->
dcoker build -f /myDocker/DockerFile -t xiaopang/centos .

docker run -it --name doc02 --volumes-from doc01 xiaopang/centos



attach           	将本地标准输入、输出和错误流附加到正在运行的容器中                   
build               从 Dockerfile 生成图像                                               
commit              从容器的更改创建新图像                                               
cp                  在容器和本地文件系统之间复制文件/文件夹                              
create           	创建新容器                                                           
diff             	检查容器文件系统上的文档或目录的更改                                 
events           	从服务器获取实时事件                                                 
exec             	在正在运行的容器中运行命令                                           
export           	将容器的文件系统导出为 tar 存档                                      
history          	显示图像的历史记录                                                   
images           	列表图像                                                             
import           	从包导入内容以创建文件系统映像                                       
info             	显示系统范围的信息                                                   
inspect          	返回关于泊坞窗对象的低级信息                                         
kill             	杀死一个或多个运行的容器                                             
load             	从 tar 存档或 STDIN 加载图像                                         
login            	登录到泊坞窗注册表                                                   
logout           	从泊坞窗注册表注销                                                   
logs             	获取容器的日志                                                       
pause            	暂停一个或多个容器内的所有进程                                       
port             	列表端口映射或容器的特定映射                                         
ps               	列表容器                                                             
pull             	从注册表中提取图像或存储库                                           
push             	将图像或存储库推送到注册表                                           
rename           	重命名--------重命名容器                                             
restart          	重新启动------重新启动一个或多个容器                                 
rm               	删除一个或多个容器                                                   
rmi              	删除一个或多个图像                                                   
run              	在新容器中运行命令                                                   
save             	将一个或多个图像保存到 tar 归档文件 ( 默认情况到标准输出 )           
search           	在泊坞窗中心搜索图像                                                 
start            	启动一个或多个已停止的容器                                           
stats            	显示容器资源使用率统计的实时流                                       
stop             	停止一个或多个正在运行的容器                                         
tag              	创建引用 SOURCE_IMAGE 的标记 TARGET_IMAGE                            
top              	显示容器的运行过程                                                   
unpause          	取消暂停一个或多个容器中的所有进程                                   
update           	一个或多个容器的更新配置                                             
version          	显示泊坞窗版本信息                                                   
wait             	阻止, 直到一个或多个容器停止, 然后打印其退出代码  




FROM         基础镜像，当前新镜像是基于哪个镜像的
MAINTAINER   镜像维护者的姓名和邮箱地址
RUN          容器构建时需要运行的命令
EXPOSE       当前容器对外暴露出的端口
WORKDIR      指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点
ENV          用来在构建镜像过程中设置环境变量
ADD          将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包
COPY         类似ADD，拷贝文件和目录到镜像中。
             将从构建上下文目录中<源路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置
VOLUME       容器数据卷，用于数据保存和持久化工作
CMD          指定一个容器启动时要运行的命令
             Dockrfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换
ENTRYPOINT   指定一个容器启动时要运行的命令
             ENTRYPOINT的日的和CMD-样， 都尼dE指定容器启动程序及参数
ONBUILD      当构建一个被继承的Dockerfle时运行命令， 父镜像在被子继承后父镜像的onbuld被触发

docker build -f /myDocker/DockerFile2 -t mycentos:1.1 .《必须要带点（.）：代表当前目录》
/****DockerFile2**
FROM centos

ENV MYPATH /tmp
WORKDIR $MYPATH

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 80
CMD echo $MYPATH
CMD echo "strating,----------OK"

CMD /bin/bash
***/



curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用yum install curl安装，也可以下载安装。curl是将下载文件输出到stdout
使用命令: curl http://www baidu.com
执行后，www.baidu.com的html就会显示在屏幕上了
这是最简单的使用方法。用这个命令获得了htp://curl.haxx.se指向的页面，同样，如果这里的URL指向的是-一个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，
那么缺省的将只显示文件头部，即HTML文档的header。 要全部显示，请加参数-i

/****DockerFile3**
FROM centos
RUN yum install -y curl
CMD ["curl","-s","http://ip.cn"]
***/

docker build -f /myDocker/DockerFile3 -t myip .
docker run myip
输出内容：
	当前 IP：209.250.240.201 来自：荷兰 Vultr


/****DockerFile4**
FROM centos
RUN yum install -y curl
ENTRYPOINT ["curl","-s","http://ip.cn"]
***/

docker build -f /myDocker/DockerFile4 -t myip1 .
docker run myip1 -i
输出内容：
	HTTP/1.1 200 OK
	Date: Wed, 05 Sep 2018 03:04:21 GMT
	Content-Type: text/html; charset=UTF-8
	Transfer-Encoding: chunked
	Connection: keep-alive
	Set-Cookie: __cfduid=d0694bc1ac9bbef981be3bd84a4005c9a1536116661; expires=Thu, 05-Sep-19 03:04:21 GMT; path=/; domain=.ip.cn; HttpOnly
	Server: cloudflare
	CF-RAY: 455577cf76059be1-AMS
	
	当前 IP：209.250.240.201 来自：荷兰 Vultr
	
FROM centos
RUN yum install -y curl
ENTRYPOINT ["curl","-s","http://ip.cn"]
ONBUILD RUN echo "father images onbuild--------886"




FROM centos 
MAINTAINER  xiaopang<xiaopangylz@126. com>
#把宿主机当前上下文的C. txt拷贝到容器/usr/loca1/路径下
COPY c.txt /usr/local/cincontainer.txt
#把java与tomcat添加到容器中
ADD jdk-8u141-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.8.tar.gz /usr/local/
#安装v im编辑器
RUN yum -y install vim
#设置工作访问时候的WORKDIR路径，登录落脚点
ENV MYPATH /usr/local
WORKDIR $MYPATH   
#配置java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_141
ENV CLASSPATH $JAVA_HOME/1ib/dt.jar:$JAVA_HOME/1ib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/1ib:$CATALINA_HOME/bin
#容器运行时监听的端口
EXPOSE 8080
#启动时运行tomcat
# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.8/bin/startup.sh" ]
# CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]
CMD /usr/1ocal/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out


docker run -d -p 9080:8080 --name newtomcat9 -v /mydocker/dockerfile/tomcat9/test:/usr/local/apache-tomcat-9.0.8/webapps/test -v /mydocker/dockerfile/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.8/logs --privileged=true mytomcat9
 
###############################################
FROM centos
MAINTAINER guocai<sunguocai0921@163.com>
COPY c.txt /usr/local/cincontainer.txt
ADD jdk-8u171-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.8.tar.gz /usr/local/
RUN yum -y install vim
ENV MYPATH /usr/local
WORKDIR $MYPATH
ENV JAVA_HOME /usr/local/jdk1.8.0_171
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/lib
EXPOSE 8080
CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out
###############################################

docker run -p 3308:3306 --name mysql5u7 -v /mydocker/dockerfile/mysql5u7/conf:/etc/mysql/conf.d -v /mydocker/dockerfile/mysql5u7/logs:/logs -v /mydocker/dockerfile/mysql5u7/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql5.7

docker exec -it 246d06096539 /bin/bash

数据备份：
docker exec <<容器ID>> sh -c 'exec mysqldump --all-databases -uroot -p"123456"' > /mydocker/dockerfile/mysql5u6/all-databases.sql


docker run -p 6379:6379 --restart=always --name myredis1 -v /mydocker/dockerfile/myredis3u2u1/data:/data -v /mydocker/dockerfile/myredis3u2u1/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes

docker run -p 6380:6379 --restart=always --name myredis2 -v /mydocker/dockerfile/myredis3u2u2/data:/data -v /mydocker/dockerfile/myredis3u2u2/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes


docker run -p 3306:3306 --restart=always --name mysql8 -v /mydocker/dockerfile/mysql8/conf:/etc/mysql/conf.d -v /mydocker/dockerfile/mysql8/logs:/logs -v /mydocker/dockerfile/mysql8/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql






































docker



