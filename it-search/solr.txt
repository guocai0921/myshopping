安装单机版Solr服务
1.拉取 Solr 镜像；
	docker pull solr:7.4.0

2.启动 Solr 容器，即可访问 http://ip:8983/ ；
	docker run --name taotao-solr -d -p 8983:8983 -t solr:7.4.0

3.新建 SolrCore，名称为 collection1；
	docker exec -it --user=solr taotao-solr bin/solr create_core -c collection1

4.为了方便后续修改配置，将容器 solr 文件拷贝本地 /usr/local/solr/ 路径下；
	docker cp taotao-solr:/opt/solr/ /usr/local/ 

5.设置中文分词 smartcn；
	进入容器 docker exec -it taotao-solr /bin/bash ；
	定位Solr7自带的中文分词器 smartcn 的jar包位置 /opt/solr/contrib/analysis-extras/lucene-libs；
	进入创建的 solrcore: collection1 配置目录 /opt/solr/server/solr/collection1/conf ，修改 solrconfig.xml 添加 smartcn 包的 lib 标签；
	lucene-analyzers-smartcn-7.4.0.jar<libdir="${solr.install.dir:../../../..}/contrib/analysis-extras/lucene-libs"regex="lucene-analyzers-smartcn-7.4.0.jar"/>
6.在 managed-schema 中添加中文分词的 FieldType ；
	<!-- chinese participle smartcn -->
	<fieldType name="cn_text" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
		<tokenizer class="org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory"/>
		</analyzer>
		<analyzer type="query">
		<tokenizer class="org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory"/>
		</analyzer>
	</fieldType>


上传配置，重启solr服务。
docker cp /usr/local/solr/server/solr/collection1/conf/solrconfig.xml taotao-solr:/opt/solr/server/solr/collection1/conf/solrconfig.xml
docker cp /usr/local/solr/server/solr/collection1/conf/managed-schema taotao-solr:/opt/solr/server/solr/collection1/conf/managed-schema
docker restart taotao-solr




<field name="item_title" type="cn_text" indexed="true" stored="true"/>
<field name="item_sell_point" type="cn_text" indexed="true" stored="true"/>
<field name="item_price"  type="plong" indexed="true" stored="true"/>
<field name="item_image" type="string" indexed="false" stored="true" />
<field name="item_category_name" type="string" indexed="true" stored="true" />
<field name="item_desc" type="cn_text" indexed="true" stored="false" />

<field name="item_keywords" type="cn_text" indexed="true" stored="false" multiValued="true"/>
<copyField source="item_title" dest="item_keywords"/>
<copyField source="item_sell_point" dest="item_keywords"/>
<copyField source="item_category_name" dest="item_keywords"/>
<copyField source="item_desc" dest="item_keywords"/>

{"id":"test001","item_title":"测试商品","item_price":123456}


q:查询的关键字，此参数最为重要，例如，q=id:1，默认为q=*:*，匹配所有文档，类似于sql中的where 1=1。

fq（filter query）:过滤查询，提供一个可选的筛选器查询。返回在q查询符合结果中同时符合的fq条件的查询结果，例如：q=id:1&fq=sort:[1 TO 5]&fq=section:0，找关键字id为1 的，并且sort是1到5之间,section=0的。还能写成fq=+sort[1 TO 5] +section:0]。性能方面的考虑:每个fq下面的记录都会单独缓存。可以考虑把经常在一起的fq条件用+方式写。

sort:排序方式，例如id desc 表示按照 “id” 降序。id desc, price asc先按id降序，再按price升序。sum(x_f, y_f) desc按x_f和y_f字段的和降序。

start,rows:分页参数，类似于start，limite的功能。啥都不输的话默认值分别为start=0,limit=10。

fl(field list):指定返回哪些字段，用逗号或空格分隔，注意：字段区分大小写，例如，fl= id,title,sort或者fl=id title sort或者fl=id title,sort或者(4.0以后的版本支持)fl=id&fl=title&fl=sort。支持通配符如fl=tag*返回所有tag开头的字段。支持方法如fl=sum(x,y)，所有支持的方法及对应的版本号见链接。

df: default field;

Raw Query Parameters:

wt (writer type)指定输出格式，有 xml, json, php等

indent:返回的结果是否缩进，默认关闭，用 indent=true|on 开启，一般调试json,php,phps,ruby输出才有必要用这个参数。